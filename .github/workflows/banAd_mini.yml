name: Sync BanAd_mini Rule

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 每天 00:00 UTC 执行

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download BanAd_mini JSON, pcdn.json and pcdn.list
        run: |
          mkdir -p temp_repo
          mkdir -p rules
          curl -L https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/refs/heads/main/Filters/AWAvenue-Ads-Rule-Singbox.json \
            -o temp_repo/banAd_mini.json
          curl -L https://raw.githubusercontent.com/DDCHlsq/sing-ruleset/refs/heads/master/pcdn.json \
            -o temp_repo/pcdn.json
          curl -L https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/pcdn.list \
            -o temp_repo/pcdn.list

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install fs-extra

      - name: Merge all rules into banAd_mini.json
        run: |
          node <<'EOF'
          const fs = require('fs-extra');
          const path = require('path');

          async function main() {
            const miniPath = 'temp_repo/banAd_mini.json';
            const pcdnJsonPath = 'temp_repo/pcdn.json';
            const pcdnListPath = 'temp_repo/pcdn.list';
            const outputPath = 'rules/banAd_mini.json';

            const combined = { domain: [], domain_suffix: [], domain_keyword: [] };

            // 合并 banAd_mini.json
            if (await fs.pathExists(miniPath)) {
              const miniData = JSON.parse(await fs.readFile(miniPath, 'utf8')) || {};
              if (Array.isArray(miniData.rules)) {
                for (const rule of miniData.rules) {
                  if (Array.isArray(rule.domain)) combined.domain.push(...rule.domain);
                  if (Array.isArray(rule.domain_suffix)) combined.domain_suffix.push(...rule.domain_suffix);
                  if (Array.isArray(rule.domain_keyword)) combined.domain_keyword.push(...rule.domain_keyword);
                }
              }
            }

            // 合并 pcdn.json
            if (await fs.pathExists(pcdnJsonPath)) {
              const pcdnData = JSON.parse(await fs.readFile(pcdnJsonPath, 'utf8')) || {};
              if (Array.isArray(pcdnData.rules)) {
                for (const rule of pcdnData.rules) {
                  if (Array.isArray(rule.domain)) combined.domain.push(...rule.domain);
                  if (Array.isArray(rule.domain_suffix)) {
                    combined.domain_suffix.push(...rule.domain_suffix.map(d => d.startsWith('.') ? d : '.' + d));
                  }
                  if (Array.isArray(rule.domain_regex)) {
                    // sing-box 里 regex 不是 keyword，这里就不放 domain_keyword
                  }
                }
              }
            }

            // 合并 pcdn.list
            if (await fs.pathExists(pcdnListPath)) {
              const lines = (await fs.readFile(pcdnListPath, 'utf8'))
                .split(/\r?\n/)
                .map(l => l.trim())
                .filter(l => l && !l.startsWith('#'));

              for (const line of lines) {
                if (line.startsWith('DOMAIN-SUFFIX,')) {
                  const val = line.replace('DOMAIN-SUFFIX,', '').trim();
                  combined.domain_suffix.push(val.startsWith('.') ? val : `.${val}`);
                } else if (line.startsWith('DOMAIN,')) {
                  const val = line.replace('DOMAIN,', '').trim();
                  combined.domain.push(val);
                } else if (line.startsWith('DOMAIN-KEYWORD,')) {
                  const val = line.replace('DOMAIN-KEYWORD,', '').trim();
                  combined.domain_keyword.push(val);
                }
              }
            }

            // 去重 + 排序
            for (const key of ['domain', 'domain_suffix', 'domain_keyword']) {
              combined[key] = Array.from(new Set(combined[key].map(d => d.trim()))).sort();
              if (!combined[key].length) delete combined[key];
            }

            // 输出
            const output = { version: 2, rules: [combined] };
            await fs.ensureDir(path.dirname(outputPath));
            await fs.writeJson(outputPath, output, { spaces: 2 });

            console.log(`Merged banAd_mini.json + pcdn.json + pcdn.list -> ${outputPath}`);
          }

          main().catch(err => { console.error(err); process.exit(1); });
          EOF

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add rules/banAd_mini.json
          git diff --cached --quiet || (git commit -m "Update banAd_mini.json (merged with pcdn.json + pcdn.list)" && git push)